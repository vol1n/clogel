({:name "std::assert_single", :annotations [{:name "std::description", :__value "Check that the input set contains at most one element, raise\n         CardinalityViolationError otherwise."}], :params [{:kind "PositionalParam", :name "input", :num 0, :typemod "SetOfType", :type {:name "anytype"}, :default nil} {:kind "NamedOnlyParam", :name "message", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "<str>{}"}], :return_typemod "OptionalType", :return_type {:name "anytype"}} {:name "std::assert_exists", :annotations [{:name "std::description", :__value "Check that the input set contains at least one element, raise\n         CardinalityViolationError otherwise."}], :params [{:kind "PositionalParam", :name "input", :num 0, :typemod "SetOfType", :type {:name "anytype"}, :default nil} {:kind "NamedOnlyParam", :name "message", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "<str>{}"}], :return_typemod "SetOfType", :return_type {:name "anytype"}} {:name "std::assert_distinct", :annotations [{:name "std::description", :__value "Check that the input set is a proper set, i.e. all elements\n         are unique"}], :params [{:kind "PositionalParam", :name "input", :num 0, :typemod "SetOfType", :type {:name "anytype"}, :default nil} {:kind "NamedOnlyParam", :name "message", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "<str>{}"}], :return_typemod "SetOfType", :return_type {:name "anytype"}} {:name "std::assert", :annotations [{:name "std::description", :__value "Assert that a boolean value is true."}], :params [{:kind "PositionalParam", :name "input", :num 0, :typemod "SingletonType", :type {:name "std::bool"}, :default nil} {:kind "NamedOnlyParam", :name "message", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "<str>{}"}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::materialized", :annotations [{:name "std::description", :__value "Force materialization of a set."}], :params [{:kind "PositionalParam", :name "input", :num 0, :typemod "SingletonType", :type {:name "anytype"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "anytype"}} {:name "std::len", :annotations [{:name "std::description", :__value "A polymorphic function to calculate a \"length\" of its first argument."}], :params [{:kind "PositionalParam", :name "str", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::len", :annotations [{:name "std::description", :__value "A polymorphic function to calculate a \"length\" of its first argument."}], :params [{:kind "PositionalParam", :name "bytes", :num 0, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::len", :annotations [{:name "std::description", :__value "A polymorphic function to calculate a \"length\" of its first argument."}], :params [{:kind "PositionalParam", :name "array", :num 0, :typemod "SingletonType", :type {:name "array<anytype>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::sum", :annotations [{:name "std::description", :__value "Return the sum of the set of numbers."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SetOfType", :type {:name "std::bigint"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bigint"}} {:name "std::sum", :annotations [{:name "std::description", :__value "Return the sum of the set of numbers."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SetOfType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::sum", :annotations [{:name "std::description", :__value "Return the sum of the set of numbers."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SetOfType", :type {:name "std::int32"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::sum", :annotations [{:name "std::description", :__value "Return the sum of the set of numbers."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SetOfType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::sum", :annotations [{:name "std::description", :__value "Return the sum of the set of numbers."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SetOfType", :type {:name "std::float32"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float32"}} {:name "std::sum", :annotations [{:name "std::description", :__value "Return the sum of the set of numbers."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SetOfType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::count", :annotations [{:name "std::description", :__value "Return the number of elements in a set."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SetOfType", :type {:name "anytype"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::random", :annotations [{:name "std::description", :__value "Return a pseudo-random number in the range `0.0 <= x < 1.0`"}], :params [], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "anytype"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "anytype"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::anyreal"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::anyreal"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::anyenum"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::anyenum"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::str"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::str"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::datetime"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::datetime"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::duration"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::duration"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the greatest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "anytype"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "anytype"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the greatest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::anyreal"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::anyreal"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the greatest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::anyenum"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::anyenum"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the greatest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::str"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::str"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the greatest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::datetime"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::datetime"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the greatest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::duration"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::duration"}} {:name "std::all", :annotations [{:name "std::description", :__value "Generalized boolean `AND` applied to the set of *values*."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::bool"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::any", :annotations [{:name "std::description", :__value "Generalized boolean `OR` applied to the set of *values*."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::bool"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::enumerate", :annotations [{:name "std::description", :__value "Return a set of tuples of the form `(index, element)`."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "anytype"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "tuple<std::int64, anytype>"}} {:name "std::round", :annotations [{:name "std::description", :__value "Round to the nearest value."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::round", :annotations [{:name "std::description", :__value "Round to the nearest value."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::round", :annotations [{:name "std::description", :__value "Round to the nearest value."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::bigint"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bigint"}} {:name "std::round", :annotations [{:name "std::description", :__value "Round to the nearest value."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::round", :annotations [{:name "std::description", :__value "Round to the nearest value."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::decimal"}, :default nil} {:kind "PositionalParam", :name "d", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::contains", :annotations [{:name "std::description", :__value "A polymorphic function to test if a sequence contains a certain element."}], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::contains", :annotations [{:name "std::description", :__value "A polymorphic function to test if a sequence contains a certain element."}], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::contains", :annotations [{:name "std::description", :__value "A polymorphic function to test if a sequence contains a certain element."}], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "array<anytype>"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "anytype"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::contains", :annotations [{:name "std::description", :__value "A polymorphic function to test if one JSON value contains another JSON value."}], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "std::json"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "std::json"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::array_fill", :annotations [{:name "std::description", :__value "Return an array filled with the given value repeated as many times as specified."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "anytype"}, :default nil} {:kind "PositionalParam", :name "n", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "array<anytype>"}} {:name "std::find", :annotations [{:name "std::description", :__value "A polymorphic function to find index of an element in a sequence."}], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::find", :annotations [{:name "std::description", :__value "A polymorphic function to find index of an element in a sequence."}], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::find", :annotations [{:name "std::description", :__value "A polymorphic function to find index of an element in a sequence."}], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "array<anytype>"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "anytype"}, :default nil} {:kind "PositionalParam", :name "from_pos", :num 2, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::bit_and", :annotations [{:name "std::description", :__value "Bitwise AND operator for 16-bit integers."}], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "std::int16"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "std::int16"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int16"}} {:name "std::bit_and", :annotations [{:name "std::description", :__value "Bitwise AND operator for 32-bit integers."}], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "std::int32"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "std::int32"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int32"}} {:name "std::bit_and", :annotations [{:name "std::description", :__value "Bitwise AND operator for 64-bit integers."}], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::bit_or", :annotations [{:name "std::description", :__value "Bitwise OR operator for 16-bit integers."}], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "std::int16"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "std::int16"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int16"}} {:name "std::bit_or", :annotations [{:name "std::description", :__value "Bitwise OR operator for 32-bit integers."}], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "std::int32"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "std::int32"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int32"}} {:name "std::bit_or", :annotations [{:name "std::description", :__value "Bitwise OR operator for 64-bit integers."}], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::bit_xor", :annotations [{:name "std::description", :__value "Bitwise exclusive OR operator for 16-bit integers."}], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "std::int16"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "std::int16"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int16"}} {:name "std::bit_xor", :annotations [{:name "std::description", :__value "Bitwise exclusive OR operator for 32-bit integers."}], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "std::int32"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "std::int32"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int32"}} {:name "std::bit_xor", :annotations [{:name "std::description", :__value "Bitwise exclusive OR operator for 64-bit integers."}], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::bit_not", :annotations [{:name "std::description", :__value "Bitwise NOT operator for 16-bit integers."}], :params [{:kind "PositionalParam", :name "r", :num 0, :typemod "SingletonType", :type {:name "std::int16"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int16"}} {:name "std::bit_not", :annotations [{:name "std::description", :__value "Bitwise NOT operator for 32-bit integers."}], :params [{:kind "PositionalParam", :name "r", :num 0, :typemod "SingletonType", :type {:name "std::int32"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int32"}} {:name "std::bit_not", :annotations [{:name "std::description", :__value "Bitwise NOT operator for 64-bit integers."}], :params [{:kind "PositionalParam", :name "r", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::bit_rshift", :annotations [{:name "std::description", :__value "Bitwise right-shift operator for 16-bit integers."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int16"}, :default nil} {:kind "PositionalParam", :name "n", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int16"}} {:name "std::bit_rshift", :annotations [{:name "std::description", :__value "Bitwise right-shift operator for 32-bit integers."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int32"}, :default nil} {:kind "PositionalParam", :name "n", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int32"}} {:name "std::bit_rshift", :annotations [{:name "std::description", :__value "Bitwise right-shift operator for 64-bit integers."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "n", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::bit_lshift", :annotations [{:name "std::description", :__value "Bitwise left-shift operator for 16-bit integers."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int16"}, :default nil} {:kind "PositionalParam", :name "n", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int16"}} {:name "std::bit_lshift", :annotations [{:name "std::description", :__value "Bitwise left-shift operator for 32-bit integers."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int32"}, :default nil} {:kind "PositionalParam", :name "n", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int32"}} {:name "std::bit_lshift", :annotations [{:name "std::description", :__value "Bitwise left-shift operator for 64-bit integers."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "n", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::bit_count", :annotations [{:name "std::description", :__value "Count the number of set bits in a 16-bit integer."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int16"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::bit_count", :annotations [{:name "std::description", :__value "Count the number of set bits in a 32-bit integer."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int32"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::bit_count", :annotations [{:name "std::description", :__value "Count the number of set bits in a 64-bit integer."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::array_agg", :annotations [{:name "std::description", :__value "Return the array made from all of the input set elements."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SetOfType", :type {:name "anytype"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "array<anytype>"}} {:name "std::array_unpack", :annotations [{:name "std::description", :__value "Return array elements as a set."}], :params [{:kind "PositionalParam", :name "array", :num 0, :typemod "SingletonType", :type {:name "array<anytype>"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "anytype"}} {:name "std::array_replace", :annotations [{:name "std::description", :__value "Replace each array element equal to the second argument with the third argument."}], :params [{:kind "PositionalParam", :name "array", :num 0, :typemod "SingletonType", :type {:name "array<anytype>"}, :default nil} {:kind "PositionalParam", :name "old", :num 1, :typemod "SingletonType", :type {:name "anytype"}, :default nil} {:kind "PositionalParam", :name "new", :num 2, :typemod "SingletonType", :type {:name "anytype"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "array<anytype>"}} {:name "std::array_get", :annotations [{:name "std::description", :__value "Return the element of *array* at the specified *index*."}], :params [{:kind "PositionalParam", :name "array", :num 0, :typemod "SingletonType", :type {:name "array<anytype>"}, :default nil} {:kind "PositionalParam", :name "idx", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "NamedOnlyParam", :name "default", :num 2, :typemod "OptionalType", :type {:name "anytype"}, :default "{}"}], :return_typemod "OptionalType", :return_type {:name "anytype"}} {:name "std::array_set", :annotations [{:name "std::description", :__value "Set the element of *array* at the specified *index*."}], :params [{:kind "PositionalParam", :name "array", :num 0, :typemod "SingletonType", :type {:name "array<anytype>"}, :default nil} {:kind "PositionalParam", :name "idx", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "val", :num 2, :typemod "SingletonType", :type {:name "anytype"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "array<anytype>"}} {:name "std::array_insert", :annotations [{:name "std::description", :__value "Insert *val* at the specified *index* of the *array*."}], :params [{:kind "PositionalParam", :name "array", :num 0, :typemod "SingletonType", :type {:name "array<anytype>"}, :default nil} {:kind "PositionalParam", :name "idx", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "val", :num 2, :typemod "SingletonType", :type {:name "anytype"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "array<anytype>"}} {:name "std::array_join", :annotations [{:name "std::description", :__value "Render an array to a string."}], :params [{:kind "PositionalParam", :name "array", :num 0, :typemod "SingletonType", :type {:name "array<std::str>"}, :default nil} {:kind "PositionalParam", :name "delimiter", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::array_join", :annotations [{:name "std::description", :__value "Render an array to a byte-string."}], :params [{:kind "PositionalParam", :name "array", :num 0, :typemod "SingletonType", :type {:name "array<std::bytes>"}, :default nil} {:kind "PositionalParam", :name "delimiter", :num 1, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bytes"}} {:name "std::bytes_get_bit", :annotations [{:name "std::description", :__value "Get the *nth* bit of the *bytes* value."}], :params [{:kind "PositionalParam", :name "bytes", :num 0, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil} {:kind "PositionalParam", :name "num", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::bit_count", :annotations [{:name "std::description", :__value "Count the number of set bits the bytes value."}], :params [{:kind "PositionalParam", :name "bytes", :num 0, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::datetime_current", :annotations [{:name "std::description", :__value "Return the current server date and time."}], :params [], :return_typemod "SingletonType", :return_type {:name "std::datetime"}} {:name "std::datetime_of_transaction", :annotations [{:name "std::description", :__value "Return the date and time of the start of the current transaction."}], :params [], :return_typemod "SingletonType", :return_type {:name "std::datetime"}} {:name "std::datetime_of_statement", :annotations [{:name "std::description", :__value "Return the date and time of the start of the current statement."}], :params [], :return_typemod "SingletonType", :return_type {:name "std::datetime"}} {:name "std::datetime_get", :annotations [{:name "std::description", :__value "Extract a specific element of input datetime by name."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::datetime"}, :default nil} {:kind "PositionalParam", :name "el", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::datetime_truncate", :annotations [{:name "std::description", :__value "Truncate the input datetime to a particular precision."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::datetime"}, :default nil} {:kind "PositionalParam", :name "unit", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::datetime"}} {:name "std::str_pad_start", :annotations [{:name "std::description", :__value "Return the input string padded at the start to the length *n*."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "n", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "fill", :num 2, :typemod "SingletonType", :type {:name "std::str"}, :default "' '"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_lpad", :annotations [{:name "std::description", :__value "Return the input string left-padded to the length *n*."} {:name "std::deprecated", :__value "This function is deprecated and is scheduled to be removed before 1.0.\nUse std::str_pad_start() instead."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "n", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "fill", :num 2, :typemod "SingletonType", :type {:name "std::str"}, :default "' '"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::duration_get", :annotations [{:name "std::description", :__value "Extract a specific element of input duration by name."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::duration"}, :default nil} {:kind "PositionalParam", :name "el", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::duration_truncate", :annotations [{:name "std::description", :__value "Truncate the input duration to a particular precision."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::duration"}, :default nil} {:kind "PositionalParam", :name "unit", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::duration"}} {:name "std::duration_to_seconds", :annotations [{:name "std::description", :__value "Return duration as total number of seconds in interval."}], :params [{:kind "PositionalParam", :name "dur", :num 0, :typemod "SingletonType", :type {:name "std::duration"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::json_typeof", :annotations [{:name "std::description", :__value "Return the type of the outermost JSON value as a string."}], :params [{:kind "PositionalParam", :name "json", :num 0, :typemod "SingletonType", :type {:name "std::json"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::json_array_unpack", :annotations [{:name "std::description", :__value "Return elements of JSON array as a set of `json`."}], :params [{:kind "PositionalParam", :name "array", :num 0, :typemod "SingletonType", :type {:name "std::json"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "std::json"}} {:name "std::json_object_unpack", :annotations [{:name "std::description", :__value "Return set of key/value tuples that make up the JSON object."}], :params [{:kind "PositionalParam", :name "obj", :num 0, :typemod "SingletonType", :type {:name "std::json"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "tuple<std::str, std::json>"}} {:name "std::json_object_pack", :annotations [{:name "std::description", :__value "Return a JSON object with set key/value pairs."}], :params [{:kind "PositionalParam", :name "pairs", :num 0, :typemod "SetOfType", :type {:name "tuple<std::str, std::json>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::json"}} {:name "std::json_get", :annotations [{:name "std::description", :__value "Return the JSON value at the end of the specified path or an empty set."}], :params [{:kind "PositionalParam", :name "json", :num 0, :typemod "SingletonType", :type {:name "std::json"}, :default nil} {:kind "VariadicParam", :name "path", :num 1, :typemod "SingletonType", :type {:name "array<std::str>"}, :default nil} {:kind "NamedOnlyParam", :name "default", :num 2, :typemod "OptionalType", :type {:name "std::json"}, :default "{}"}], :return_typemod "OptionalType", :return_type {:name "std::json"}} {:name "std::json_set", :annotations [{:name "std::description", :__value "Return an updated JSON target with a new value."}], :params [{:kind "PositionalParam", :name "target", :num 0, :typemod "SingletonType", :type {:name "std::json"}, :default nil} {:kind "VariadicParam", :name "path", :num 1, :typemod "SingletonType", :type {:name "array<std::str>"}, :default nil} {:kind "NamedOnlyParam", :name "value", :num 2, :typemod "OptionalType", :type {:name "std::json"}, :default nil} {:kind "NamedOnlyParam", :name "create_if_missing", :num 3, :typemod "SingletonType", :type {:name "std::bool"}, :default "true"} {:kind "NamedOnlyParam", :name "empty_treatment", :num 4, :typemod "SingletonType", :type {:name "std::JsonEmpty"}, :default "std::JsonEmpty.ReturnEmpty"}], :return_typemod "OptionalType", :return_type {:name "std::json"}} {:name "std::re_match", :annotations [{:name "std::description", :__value "Find the first regular expression match in a string."}], :params [{:kind "PositionalParam", :name "pattern", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "str", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "array<std::str>"}} {:name "std::re_match_all", :annotations [{:name "std::description", :__value "Find all regular expression matches in a string."}], :params [{:kind "PositionalParam", :name "pattern", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "str", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "array<std::str>"}} {:name "std::re_test", :annotations [{:name "std::description", :__value "Test if a regular expression has a match in a string."}], :params [{:kind "PositionalParam", :name "pattern", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "str", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::re_replace", :annotations [{:name "std::description", :__value "Replace matching substrings in a given string."}], :params [{:kind "PositionalParam", :name "pattern", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "sub", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "str", :num 2, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "NamedOnlyParam", :name "flags", :num 3, :typemod "SingletonType", :type {:name "std::str"}, :default "''"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_repeat", :annotations [{:name "std::description", :__value "Repeat the input *string* *n* times."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "n", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_lower", :annotations [{:name "std::description", :__value "Return a lowercase copy of the input *string*."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_upper", :annotations [{:name "std::description", :__value "Return an uppercase copy of the input *string*."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_title", :annotations [{:name "std::description", :__value "Return a titlecase copy of the input *string*."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_pad_end", :annotations [{:name "std::description", :__value "Return the input string padded at the end to the length *n*."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "n", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "fill", :num 2, :typemod "SingletonType", :type {:name "std::str"}, :default "' '"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_rpad", :annotations [{:name "std::description", :__value "Return the input string right-padded to the length *n*."} {:name "std::deprecated", :__value "This function is deprecated and is scheduled to be removed before 1.0.\nUse std::str_pad_end() instead."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "n", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "fill", :num 2, :typemod "SingletonType", :type {:name "std::str"}, :default "' '"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_trim_start", :annotations [{:name "std::description", :__value "Return the input string with all *trim* characters removed from its start."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "tr", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default "' '"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_ltrim", :annotations [{:name "std::description", :__value "Return the input string with all leftmost *trim* characters removed."} {:name "std::deprecated", :__value "This function is deprecated and is scheduled to be removed before 1.0.\nUse std::str_trim_start() instead."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "tr", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default "' '"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_trim_end", :annotations [{:name "std::description", :__value "Return the input string with all *trim* characters removed from its end."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "tr", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default "' '"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_rtrim", :annotations [{:name "std::description", :__value "Return the input string with all rightmost *trim* characters removed."} {:name "std::deprecated", :__value "This function is deprecated and is scheduled to be removed before 1.0.\nUse std::str_trim_end() instead."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "tr", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default "' '"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_trim", :annotations [{:name "std::description", :__value "Return the input string with *trim* characters removed from both ends."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "tr", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default "' '"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_split", :annotations [{:name "std::description", :__value "Split string into array elements using the supplied delimiter."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "delimiter", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "array<std::str>"}} {:name "std::str_replace", :annotations [{:name "std::description", :__value "Given a string, find a matching substring and replace all its occurrences with a new substring."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "old", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "new", :num 2, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::str_reverse", :annotations [{:name "std::description", :__value "Reverse the order of the characters in the string."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::uuid_generate_v1mc", :annotations [{:name "std::description", :__value "Return a version 1 UUID."}], :params [], :return_typemod "SingletonType", :return_type {:name "std::uuid"}} {:name "std::uuid_generate_v4", :annotations [{:name "std::description", :__value "Return a version 4 UUID."}], :params [], :return_typemod "SingletonType", :return_type {:name "std::uuid"}} {:name "std::range", :annotations [], :params [{:kind "PositionalParam", :name "lower", :num 0, :typemod "OptionalType", :type {:name "std::anypoint"}, :default "{}"} {:kind "PositionalParam", :name "upper", :num 1, :typemod "OptionalType", :type {:name "std::anypoint"}, :default "{}"} {:kind "NamedOnlyParam", :name "inc_lower", :num 2, :typemod "SingletonType", :type {:name "std::bool"}, :default "true"} {:kind "NamedOnlyParam", :name "inc_upper", :num 3, :typemod "SingletonType", :type {:name "std::bool"}, :default "false"} {:kind "NamedOnlyParam", :name "empty", :num 4, :typemod "SingletonType", :type {:name "std::bool"}, :default "false"}], :return_typemod "SingletonType", :return_type {:name "range<std::anypoint>"}} {:name "std::multirange", :annotations [], :params [{:kind "PositionalParam", :name "ranges", :num 0, :typemod "SingletonType", :type {:name "array<range<std|anypoint>>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "multirange<std::anypoint>"}} {:name "std::range_is_empty", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::range_is_empty", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::range_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "range<std::int32>"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "std::int32"}} {:name "std::range_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "range<std::int32>"}, :default nil} {:kind "PositionalParam", :name "step", :num 1, :typemod "SingletonType", :type {:name "std::int32"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "std::int32"}} {:name "std::range_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "range<std::int64>"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "std::int64"}} {:name "std::range_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "range<std::int64>"}, :default nil} {:kind "PositionalParam", :name "step", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "std::int64"}} {:name "std::range_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "range<std::float32>"}, :default nil} {:kind "PositionalParam", :name "step", :num 1, :typemod "SingletonType", :type {:name "std::float32"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "std::float32"}} {:name "std::range_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "range<std::float64>"}, :default nil} {:kind "PositionalParam", :name "step", :num 1, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "std::float64"}} {:name "std::range_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "range<std::decimal>"}, :default nil} {:kind "PositionalParam", :name "step", :num 1, :typemod "SingletonType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "std::decimal"}} {:name "std::math::lg", :annotations [{:name "std::description", :__value "Return the base 10 logarithm of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::lg", :annotations [{:name "std::description", :__value "Return the base 10 logarithm of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::range_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "range<std::datetime>"}, :default nil} {:kind "PositionalParam", :name "step", :num 1, :typemod "SingletonType", :type {:name "std::duration"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "std::datetime"}} {:name "std::range_get_upper", :annotations [], :params [{:kind "PositionalParam", :name "r", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::anypoint"}} {:name "std::range_get_lower", :annotations [], :params [{:kind "PositionalParam", :name "r", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::anypoint"}} {:name "std::range_is_inclusive_upper", :annotations [], :params [{:kind "PositionalParam", :name "r", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::range_is_inclusive_lower", :annotations [], :params [{:kind "PositionalParam", :name "r", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::range_get_upper", :annotations [], :params [{:kind "PositionalParam", :name "r", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::anypoint"}} {:name "std::range_get_lower", :annotations [], :params [{:kind "PositionalParam", :name "r", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::anypoint"}} {:name "std::range_is_inclusive_upper", :annotations [], :params [{:kind "PositionalParam", :name "r", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::range_is_inclusive_lower", :annotations [], :params [{:kind "PositionalParam", :name "r", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::contains", :annotations [], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::contains", :annotations [], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "std::anypoint"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::contains", :annotations [], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::contains", :annotations [], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::contains", :annotations [], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "std::anypoint"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::overlaps", :annotations [], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::overlaps", :annotations [], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::multirange_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "multirange<std::int32>"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "range<std::int32>"}} {:name "std::multirange_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "multirange<std::int64>"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "range<std::int64>"}} {:name "std::multirange_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "multirange<std::float32>"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "range<std::float32>"}} {:name "std::multirange_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "multirange<std::float64>"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "range<std::float64>"}} {:name "std::multirange_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "multirange<std::decimal>"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "range<std::decimal>"}} {:name "std::multirange_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "multirange<std::datetime>"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "range<std::datetime>"}} {:name "std::strictly_below", :annotations [], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::strictly_below", :annotations [], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::strictly_above", :annotations [], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::strictly_above", :annotations [], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::bounded_above", :annotations [], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::bounded_above", :annotations [], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::bounded_below", :annotations [], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::bounded_below", :annotations [], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::adjacent", :annotations [], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "range<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::adjacent", :annotations [], :params [{:kind "PositionalParam", :name "l", :num 0, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil} {:kind "PositionalParam", :name "r", :num 1, :typemod "SingletonType", :type {:name "multirange<std::anypoint>"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::math::log", :annotations [{:name "std::description", :__value "Return the logarithm of the input value in the specified *base*."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::decimal"}, :default nil} {:kind "NamedOnlyParam", :name "base", :num 1, :typemod "SingletonType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::math::sqrt", :annotations [{:name "std::description", :__value "Return the square root of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Return string representation of the input value."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::datetime"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Return string representation of the input value."}], :params [{:kind "PositionalParam", :name "td", :num 0, :typemod "SingletonType", :type {:name "std::duration"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Return string representation of the input value."}], :params [{:kind "PositionalParam", :name "i", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Return string representation of the input value."}], :params [{:kind "PositionalParam", :name "f", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Return string representation of the input value."}], :params [{:kind "PositionalParam", :name "d", :num 0, :typemod "SingletonType", :type {:name "std::bigint"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Return string representation of the input value."}], :params [{:kind "PositionalParam", :name "d", :num 0, :typemod "SingletonType", :type {:name "std::decimal"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Return string representation of the input value."} {:name "std::deprecated", :__value "This converter function is deprecated and is scheduled to be removed before 1.0.\nUse std::array_join() instead."}], :params [{:kind "PositionalParam", :name "array", :num 0, :typemod "SingletonType", :type {:name "array<std::str>"}, :default nil} {:kind "PositionalParam", :name "delimiter", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Return string representation of the input value."}], :params [{:kind "PositionalParam", :name "json", :num 0, :typemod "SingletonType", :type {:name "std::json"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Convert a binary UTF-8 string to a text value."}], :params [{:kind "PositionalParam", :name "b", :num 0, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_bytes", :annotations [{:name "std::description", :__value "Convert a text string to a binary UTF-8 string."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bytes"}} {:name "std::to_bytes", :annotations [{:name "std::description", :__value "Convert an int16 using specified endian binary format."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int16"}, :default nil} {:kind "PositionalParam", :name "endian", :num 1, :typemod "SingletonType", :type {:name "std::Endian"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bytes"}} {:name "std::to_bytes", :annotations [{:name "std::description", :__value "Convert an int32 using specified endian binary format."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int32"}, :default nil} {:kind "PositionalParam", :name "endian", :num 1, :typemod "SingletonType", :type {:name "std::Endian"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bytes"}} {:name "std::to_bytes", :annotations [{:name "std::description", :__value "Convert an int64 using specified endian binary format."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "endian", :num 1, :typemod "SingletonType", :type {:name "std::Endian"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bytes"}} {:name "std::to_bytes", :annotations [{:name "std::description", :__value "Convert an UUID to binary format."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::uuid"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bytes"}} {:name "std::to_json", :annotations [{:name "std::description", :__value "Return JSON value represented by the input *string*."}], :params [{:kind "PositionalParam", :name "str", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::json"}} {:name "std::math::sqrt", :annotations [{:name "std::description", :__value "Return the square root of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::sqrt", :annotations [{:name "std::description", :__value "Return the square root of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::to_datetime", :annotations [{:name "std::description", :__value "Create a `datetime` value."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::datetime"}} {:name "std::to_datetime", :annotations [{:name "std::description", :__value "Create a `datetime` value."}], :params [{:kind "PositionalParam", :name "year", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "month", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "day", :num 2, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "hour", :num 3, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "min", :num 4, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "sec", :num 5, :typemod "SingletonType", :type {:name "std::float64"}, :default nil} {:kind "PositionalParam", :name "timezone", :num 6, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::datetime"}} {:name "std::to_datetime", :annotations [{:name "std::description", :__value "Create a `datetime` value."}], :params [{:kind "PositionalParam", :name "epochseconds", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::datetime"}} {:name "std::to_datetime", :annotations [{:name "std::description", :__value "Create a `datetime` value."}], :params [{:kind "PositionalParam", :name "epochseconds", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::datetime"}} {:name "std::to_datetime", :annotations [{:name "std::description", :__value "Create a `datetime` value."}], :params [{:kind "PositionalParam", :name "epochseconds", :num 0, :typemod "SingletonType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::datetime"}} {:name "std::to_duration", :annotations [{:name "std::description", :__value "Create a `duration` value."}], :params [{:kind "NamedOnlyParam", :name "hours", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"} {:kind "NamedOnlyParam", :name "minutes", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"} {:kind "NamedOnlyParam", :name "seconds", :num 2, :typemod "SingletonType", :type {:name "std::float64"}, :default "0"} {:kind "NamedOnlyParam", :name "microseconds", :num 3, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"}], :return_typemod "SingletonType", :return_type {:name "std::duration"}} {:name "std::to_bigint", :annotations [{:name "std::description", :__value "Create a `bigint` value."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::bigint"}} {:name "std::to_decimal", :annotations [{:name "std::description", :__value "Create a `decimal` value."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::to_int64", :annotations [{:name "std::description", :__value "Create a `int64` value."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::to_int64", :annotations [{:name "std::description", :__value "Convert bytes into `int64` value."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil} {:kind "PositionalParam", :name "endian", :num 1, :typemod "SingletonType", :type {:name "std::Endian"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::to_int32", :annotations [{:name "std::description", :__value "Create a `int32` value."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::int32"}} {:name "std::to_int32", :annotations [{:name "std::description", :__value "Convert bytes into `int32` value."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil} {:kind "PositionalParam", :name "endian", :num 1, :typemod "SingletonType", :type {:name "std::Endian"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int32"}} {:name "sys::get_current_branch", :annotations [{:name "std::description", :__value "Return the name of the current database branch as a string."}], :params [], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_int16", :annotations [{:name "std::description", :__value "Create a `int16` value."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::int16"}} {:name "std::to_int16", :annotations [{:name "std::description", :__value "Convert bytes into `int16` value."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil} {:kind "PositionalParam", :name "endian", :num 1, :typemod "SingletonType", :type {:name "std::Endian"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int16"}} {:name "std::to_float64", :annotations [{:name "std::description", :__value "Create a `float64` value."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::to_float32", :annotations [{:name "std::description", :__value "Create a `float32` value."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::float32"}} {:name "std::to_uuid", :annotations [{:name "std::description", :__value "Convert binary representation into UUID value."}], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::uuid"}} {:name "std::sequence_reset", :annotations [], :params [{:kind "PositionalParam", :name "seq", :num 0, :typemod "SingletonType", :type {:name "schema::ScalarType"}, :default nil} {:kind "PositionalParam", :name "value", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::sequence_reset", :annotations [], :params [{:kind "PositionalParam", :name "seq", :num 0, :typemod "SingletonType", :type {:name "schema::ScalarType"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::sequence_next", :annotations [], :params [{:kind "PositionalParam", :name "seq", :num 0, :typemod "SingletonType", :type {:name "schema::ScalarType"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::math::abs", :annotations [{:name "std::description", :__value "Return the absolute value of the input *x*."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::anyreal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::anyreal"}} {:name "std::math::ceil", :annotations [{:name "std::description", :__value "Round up to the nearest integer."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::math::ceil", :annotations [{:name "std::description", :__value "Round up to the nearest integer."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::ceil", :annotations [{:name "std::description", :__value "Round up to the nearest integer."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::bigint"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bigint"}} {:name "std::math::ceil", :annotations [{:name "std::description", :__value "Round up to the nearest integer."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::math::floor", :annotations [{:name "std::description", :__value "Round down to the nearest integer."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::int64"}} {:name "std::math::floor", :annotations [{:name "std::description", :__value "Round down to the nearest integer."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::floor", :annotations [{:name "std::description", :__value "Round down to the nearest integer."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::bigint"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bigint"}} {:name "std::math::floor", :annotations [{:name "std::description", :__value "Round down to the nearest integer."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::math::ln", :annotations [{:name "std::description", :__value "Return the natural logarithm of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::ln", :annotations [{:name "std::description", :__value "Return the natural logarithm of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::ln", :annotations [{:name "std::description", :__value "Return the natural logarithm of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::math::lg", :annotations [{:name "std::description", :__value "Return the base 10 logarithm of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::mean", :annotations [{:name "std::description", :__value "Return the arithmetic mean of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::math::mean", :annotations [{:name "std::description", :__value "Return the arithmetic mean of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::mean", :annotations [{:name "std::description", :__value "Return the arithmetic mean of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::stddev", :annotations [{:name "std::description", :__value "Return the sample standard deviation of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::math::stddev", :annotations [{:name "std::description", :__value "Return the sample standard deviation of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::stddev", :annotations [{:name "std::description", :__value "Return the sample standard deviation of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::stddev_pop", :annotations [{:name "std::description", :__value "Return the population standard deviation of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::decimal"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::decimal"}} {:name "std::math::stddev_pop", :annotations [{:name "std::description", :__value "Return the population standard deviation of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::stddev_pop", :annotations [{:name "std::description", :__value "Return the population standard deviation of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::var", :annotations [{:name "std::description", :__value "Return the sample variance of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::decimal"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::decimal"}} {:name "std::math::var", :annotations [{:name "std::description", :__value "Return the sample variance of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::int64"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::float64"}} {:name "std::math::var", :annotations [{:name "std::description", :__value "Return the sample variance of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::float64"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::float64"}} {:name "std::math::var_pop", :annotations [{:name "std::description", :__value "Return the population variance of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::decimal"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::decimal"}} {:name "std::math::var_pop", :annotations [{:name "std::description", :__value "Return the population variance of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::int64"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::float64"}} {:name "std::math::var_pop", :annotations [{:name "std::description", :__value "Return the population variance of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::float64"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::float64"}} {:name "std::math::pi", :annotations [{:name "std::description", :__value "Return the constant value of pi."}], :params [], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::acos", :annotations [{:name "std::description", :__value "Return the inverse cosine of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::asin", :annotations [{:name "std::description", :__value "Return the inverse sine of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::atan", :annotations [{:name "std::description", :__value "Return the inverse tangent of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::atan2", :annotations [{:name "std::description", :__value "Return the inverse tangent of y/x of the input value."}], :params [{:kind "PositionalParam", :name "y", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil} {:kind "PositionalParam", :name "x", :num 1, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::cos", :annotations [{:name "std::description", :__value "Return the cosine of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::cot", :annotations [{:name "std::description", :__value "Return the cotangent of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::sin", :annotations [{:name "std::description", :__value "Return the sine of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::math::tan", :annotations [{:name "std::description", :__value "Return the tangent of the input value."}], :params [{:kind "PositionalParam", :name "x", :num 0, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "sys::reset_query_stats", :annotations [{:name "std::description", :__value "Discard query statistics gathered so far corresponding to the specified `branch_name` and `id`. If either of the parameters is not specified, the statistics that match with the other parameter will be reset. If no parameter is specified, it will discard all statistics. When `minmax_only` is `true`, only the values of minimum and maximum planning and execution time will be reset (i.e. `min_plan_time`, `max_plan_time`, `min_exec_time` and `max_exec_time` fields). The default value for `minmax_only` parameter is `false`. This function returns the time of a reset. This time is saved to `stats_reset` or `minmax_stats_since` field of `sys::QueryStats` if the corresponding reset was actually performed."}], :params [{:kind "NamedOnlyParam", :name "branch_name", :num 0, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"} {:kind "NamedOnlyParam", :name "id", :num 1, :typemod "OptionalType", :type {:name "std::uuid"}, :default "{}"} {:kind "NamedOnlyParam", :name "minmax_only", :num 2, :typemod "OptionalType", :type {:name "std::bool"}, :default "false"}], :return_typemod "OptionalType", :return_type {:name "std::datetime"}} {:name "sys::get_version", :annotations [{:name "std::description", :__value "Return the server version as a tuple."}], :params [], :return_typemod "SingletonType", :return_type {:name "tuple<major:std::int64, minor:std::int64, stage:sys::VersionStage, stage_no:std::int64, local:array<std|str>>"}} {:name "sys::get_version_as_str", :annotations [{:name "std::description", :__value "Return the server version as a string."}], :params [], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "sys::get_instance_name", :annotations [{:name "std::description", :__value "Return the server instance name."}], :params [], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "sys::get_transaction_isolation", :annotations [{:name "std::description", :__value "Return the isolation level of the current transaction."}], :params [], :return_typemod "SingletonType", :return_type {:name "sys::TransactionIsolation"}} {:name "sys::get_current_database", :annotations [{:name "std::description", :__value "Return the name of the current database branch as a string."}], :params [], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "cfg::get_config_json", :annotations [], :params [{:kind "NamedOnlyParam", :name "sources", :num 0, :typemod "OptionalType", :type {:name "array<std::str>"}, :default "{}"} {:kind "NamedOnlyParam", :name "max_source", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::json"}} {:name "std::cal::to_local_datetime", :annotations [{:name "std::description", :__value "Create a `std::cal::local_datetime` value."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::cal::local_datetime"}} {:name "std::cal::to_local_datetime", :annotations [{:name "std::description", :__value "Create a `std::cal::local_datetime` value."}], :params [{:kind "PositionalParam", :name "year", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "month", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "day", :num 2, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "hour", :num 3, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "min", :num 4, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "sec", :num 5, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::cal::local_datetime"}} {:name "std::cal::to_local_datetime", :annotations [{:name "std::description", :__value "Create a `std::cal::local_datetime` value."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::datetime"}, :default nil} {:kind "PositionalParam", :name "zone", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::cal::local_datetime"}} {:name "std::cal::to_local_date", :annotations [{:name "std::description", :__value "Create a `std::cal::local_date` value."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::cal::local_date"}} {:name "std::cal::to_local_date", :annotations [{:name "std::description", :__value "Create a `std::cal::local_date` value."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::datetime"}, :default nil} {:kind "PositionalParam", :name "zone", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::cal::local_date"}} {:name "std::cal::to_local_date", :annotations [{:name "std::description", :__value "Create a `std::cal::local_date` value."}], :params [{:kind "PositionalParam", :name "year", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "month", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "day", :num 2, :typemod "SingletonType", :type {:name "std::int64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::cal::local_date"}} {:name "std::cal::to_local_time", :annotations [{:name "std::description", :__value "Create a `std::cal::local_time` value."}], :params [{:kind "PositionalParam", :name "s", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::cal::local_time"}} {:name "std::cal::to_local_time", :annotations [{:name "std::description", :__value "Create a `std::cal::local_time` value."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::datetime"}, :default nil} {:kind "PositionalParam", :name "zone", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::cal::local_time"}} {:name "std::cal::to_local_time", :annotations [{:name "std::description", :__value "Create a `std::cal::local_time` value."}], :params [{:kind "PositionalParam", :name "hour", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "min", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default nil} {:kind "PositionalParam", :name "sec", :num 2, :typemod "SingletonType", :type {:name "std::float64"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::cal::local_time"}} {:name "std::cal::to_relative_duration", :annotations [{:name "std::description", :__value "Create a `std::cal::relative_duration` value."}], :params [{:kind "NamedOnlyParam", :name "years", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"} {:kind "NamedOnlyParam", :name "months", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"} {:kind "NamedOnlyParam", :name "days", :num 2, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"} {:kind "NamedOnlyParam", :name "hours", :num 3, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"} {:kind "NamedOnlyParam", :name "minutes", :num 4, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"} {:kind "NamedOnlyParam", :name "seconds", :num 5, :typemod "SingletonType", :type {:name "std::float64"}, :default "0"} {:kind "NamedOnlyParam", :name "microseconds", :num 6, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"}], :return_typemod "SingletonType", :return_type {:name "std::cal::relative_duration"}} {:name "std::cal::to_date_duration", :annotations [{:name "std::description", :__value "Create a `std::cal::date_duration` value."}], :params [{:kind "NamedOnlyParam", :name "years", :num 0, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"} {:kind "NamedOnlyParam", :name "months", :num 1, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"} {:kind "NamedOnlyParam", :name "days", :num 2, :typemod "SingletonType", :type {:name "std::int64"}, :default "0"}], :return_typemod "SingletonType", :return_type {:name "std::cal::date_duration"}} {:name "std::cal::time_get", :annotations [{:name "std::description", :__value "Extract a specific element of input time by name."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::cal::local_time"}, :default nil} {:kind "PositionalParam", :name "el", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::cal::date_get", :annotations [{:name "std::description", :__value "Extract a specific element of input date by name."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::cal::local_date"}, :default nil} {:kind "PositionalParam", :name "el", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::cal::duration_normalize_hours", :annotations [{:name "std::description", :__value "Convert 24-hour chunks into days."}], :params [{:kind "PositionalParam", :name "dur", :num 0, :typemod "SingletonType", :type {:name "std::cal::relative_duration"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::cal::relative_duration"}} {:name "std::cal::duration_normalize_days", :annotations [{:name "std::description", :__value "Convert 30-day chunks into months."}], :params [{:kind "PositionalParam", :name "dur", :num 0, :typemod "SingletonType", :type {:name "std::cal::relative_duration"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::cal::relative_duration"}} {:name "std::cal::duration_normalize_days", :annotations [{:name "std::description", :__value "Convert 30-day chunks into months."}], :params [{:kind "PositionalParam", :name "dur", :num 0, :typemod "SingletonType", :type {:name "std::cal::date_duration"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::cal::date_duration"}} {:name "std::datetime_get", :annotations [{:name "std::description", :__value "Extract a specific element of input datetime by name."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::cal::local_datetime"}, :default nil} {:kind "PositionalParam", :name "el", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::duration_get", :annotations [{:name "std::description", :__value "Extract a specific element of input duration by name."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::cal::date_duration"}, :default nil} {:kind "PositionalParam", :name "el", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::duration_get", :annotations [{:name "std::description", :__value "Extract a specific element of input duration by name."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::cal::relative_duration"}, :default nil} {:kind "PositionalParam", :name "el", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::float64"}} {:name "std::duration_truncate", :annotations [{:name "std::description", :__value "Truncate the input duration to a particular precision."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::cal::date_duration"}, :default nil} {:kind "PositionalParam", :name "unit", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::cal::date_duration"}} {:name "std::duration_truncate", :annotations [{:name "std::description", :__value "Truncate the input duration to a particular precision."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::cal::relative_duration"}, :default nil} {:kind "PositionalParam", :name "unit", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::cal::relative_duration"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Return string representation of the input value."}], :params [{:kind "PositionalParam", :name "dt", :num 0, :typemod "SingletonType", :type {:name "std::cal::local_datetime"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Return string representation of the input value."}], :params [{:kind "PositionalParam", :name "d", :num 0, :typemod "SingletonType", :type {:name "std::cal::local_date"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Return string representation of the input value."}], :params [{:kind "PositionalParam", :name "nt", :num 0, :typemod "SingletonType", :type {:name "std::cal::local_time"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_str", :annotations [{:name "std::description", :__value "Return string representation of the input value."}], :params [{:kind "PositionalParam", :name "rd", :num 0, :typemod "SingletonType", :type {:name "std::cal::relative_duration"}, :default nil} {:kind "PositionalParam", :name "fmt", :num 1, :typemod "OptionalType", :type {:name "std::str"}, :default "{}"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::to_datetime", :annotations [{:name "std::description", :__value "Create a `datetime` value."}], :params [{:kind "PositionalParam", :name "local", :num 0, :typemod "SingletonType", :type {:name "std::cal::local_datetime"}, :default nil} {:kind "PositionalParam", :name "zone", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::datetime"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::cal::local_datetime"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::cal::local_datetime"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::cal::local_date"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::cal::local_date"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::cal::local_time"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::cal::local_time"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::cal::relative_duration"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::cal::relative_duration"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::cal::date_duration"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::cal::date_duration"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "array<std::cal::local_datetime>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "array<std::cal::local_datetime>"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "array<std::cal::local_date>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "array<std::cal::local_date>"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "array<std::cal::local_time>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "array<std::cal::local_time>"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "array<std::cal::relative_duration>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "array<std::cal::relative_duration>"}} {:name "std::min", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "array<std::cal::date_duration>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "array<std::cal::date_duration>"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::cal::local_datetime"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::cal::local_datetime"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::cal::local_date"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::cal::local_date"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::cal::local_time"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::cal::local_time"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the greatest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::cal::relative_duration"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::cal::relative_duration"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the greatest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "std::cal::date_duration"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "std::cal::date_duration"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "array<std::cal::local_datetime>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "array<std::cal::local_datetime>"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "array<std::cal::local_date>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "array<std::cal::local_date>"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "array<std::cal::local_time>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "array<std::cal::local_time>"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "array<std::cal::relative_duration>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "array<std::cal::relative_duration>"}} {:name "std::max", :annotations [{:name "std::description", :__value "Return the smallest value of the input set."}], :params [{:kind "PositionalParam", :name "vals", :num 0, :typemod "SetOfType", :type {:name "array<std::cal::date_duration>"}, :default nil}], :return_typemod "OptionalType", :return_type {:name "array<std::cal::date_duration>"}} {:name "std::multirange_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "multirange<std::cal::local_datetime>"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "range<std::cal::local_datetime>"}} {:name "std::multirange_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "multirange<std::cal::local_date>"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "range<std::cal::local_date>"}} {:name "std::range_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "range<std::cal::local_datetime>"}, :default nil} {:kind "PositionalParam", :name "step", :num 1, :typemod "SingletonType", :type {:name "std::cal::relative_duration"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "std::cal::local_datetime"}} {:name "std::range_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "range<std::cal::local_date>"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "std::cal::local_date"}} {:name "std::range_unpack", :annotations [], :params [{:kind "PositionalParam", :name "val", :num 0, :typemod "SingletonType", :type {:name "range<std::cal::local_date>"}, :default nil} {:kind "PositionalParam", :name "step", :num 1, :typemod "SingletonType", :type {:name "std::cal::date_duration"}, :default nil}], :return_typemod "SetOfType", :return_type {:name "std::cal::local_date"}} {:name "std::contains", :annotations [], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "range<std::cal::local_date>"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "std::cal::local_date"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::contains", :annotations [], :params [{:kind "PositionalParam", :name "haystack", :num 0, :typemod "SingletonType", :type {:name "multirange<std::cal::local_date>"}, :default nil} {:kind "PositionalParam", :name "needle", :num 1, :typemod "SingletonType", :type {:name "std::cal::local_date"}, :default nil}], :return_typemod "SingletonType", :return_type {:name "std::bool"}} {:name "std::enc::base64_encode", :annotations [{:name "std::description", :__value "Encode given data as a base64 string"}], :params [{:kind "PositionalParam", :name "data", :num 0, :typemod "SingletonType", :type {:name "std::bytes"}, :default nil} {:kind "NamedOnlyParam", :name "alphabet", :num 1, :typemod "SingletonType", :type {:name "std::enc::Base64Alphabet"}, :default "std::enc::Base64Alphabet.standard"} {:kind "NamedOnlyParam", :name "padding", :num 2, :typemod "SingletonType", :type {:name "std::bool"}, :default "true"}], :return_typemod "SingletonType", :return_type {:name "std::str"}} {:name "std::enc::base64_decode", :annotations [{:name "std::description", :__value "Decode the byte64-encoded byte string and return decoded bytes."}], :params [{:kind "PositionalParam", :name "data", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "NamedOnlyParam", :name "alphabet", :num 1, :typemod "SingletonType", :type {:name "std::enc::Base64Alphabet"}, :default "std::enc::Base64Alphabet.standard"} {:kind "NamedOnlyParam", :name "padding", :num 2, :typemod "SingletonType", :type {:name "std::bool"}, :default "true"}], :return_typemod "SingletonType", :return_type {:name "std::bytes"}} {:name "std::fts::with_options", :annotations [{:name "std::description", :__value "\n        Adds language and weight category information to a string,\n        so it be indexed with std::fts::index.\n    "}], :params [{:kind "PositionalParam", :name "text", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "NamedOnlyParam", :name "language", :num 1, :typemod "SingletonType", :type {:name "std::anyenum"}, :default nil} {:kind "NamedOnlyParam", :name "weight_category", :num 2, :typemod "OptionalType", :type {:name "std::fts::Weight"}, :default "std::fts::Weight.A"}], :return_typemod "SingletonType", :return_type {:name "std::fts::document"}} {:name "std::fts::search", :annotations [{:name "std::description", :__value "\n        Search an object using its std::fts::index index.\n        Returns objects that match the specified query and the matching score.\n    "}], :params [{:kind "PositionalParam", :name "object", :num 0, :typemod "SingletonType", :type {:name "anyobject"}, :default nil} {:kind "PositionalParam", :name "query", :num 1, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "NamedOnlyParam", :name "language", :num 2, :typemod "SingletonType", :type {:name "std::str"}, :default "<std::str>std::fts::Language.eng"} {:kind "NamedOnlyParam", :name "weights", :num 3, :typemod "OptionalType", :type {:name "array<std::float64>"}, :default "{}"}], :return_typemod "OptionalType", :return_type {:name "tuple<object:anyobject, score:std::float32>"}} {:name "std::net::http::schedule_request", :annotations [], :params [{:kind "PositionalParam", :name "url", :num 0, :typemod "SingletonType", :type {:name "std::str"}, :default nil} {:kind "NamedOnlyParam", :name "body", :num 1, :typemod "OptionalType", :type {:name "std::bytes"}, :default "{}"} {:kind "NamedOnlyParam", :name "headers", :num 2, :typemod "OptionalType", :type {:name "array<tuple<name:std|str, value:std|str>>"}, :default "{}"} {:kind "NamedOnlyParam", :name "method", :num 3, :typemod "SingletonType", :type {:name "std::net::http::Method"}, :default "std::net::http::Method.`GET`"}], :return_typemod "SingletonType", :return_type {:name "std::net::http::ScheduledRequest"}})